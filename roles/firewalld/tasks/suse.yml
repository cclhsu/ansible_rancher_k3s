---
# - name: Add required modules
#   modprobe:
#     name: "{{ item.name }}"
#     state: present
#   loop:
#     "{{ _module }}"
#   tags: firewalld

# - name: Setup required sysctl params
#   sysctl:
#     name: "{{ item.key }}"
#     value: "{{ item.value }}"
#     sysctl_set: yes
#     state: present
#     reload: yes
#   loop:
#     "{{ _sysctl }}"
#   tags: firewalld

# - name: Add repositories
#   zypper_repository:
#     state: present
#     repo: "{{ item.repo }}"
#   loop: "{{ _repo }}"
#   changed_when: false
#   tags: firewalld

- name: Refresh repositories
  zypper_repository:
    repo: '*'
    auto_import_keys: yes
    runrefresh: yes
  tags: firewalld

- name: Update all packages
  zypper:
    name: '*'
    state: latest
    update_cache: yes
  changed_when: false
  ignore_errors: true
  tags: firewalld

- name: Install packages
  zypper:
    name: "{{ item.name }}"
    state: "{{ item.state }}"
    disable_gpg_check: yes
    update_cache: yes
    # extra_args: ''
  loop: "{{ _package }}"
  register: result
  until: result is succeeded
  tags: firewalld

# - name: just force systemd to reread configs
#   systemd:
#     daemon_reload: yes
#   tags: firewalld

- name: Start and enable services
  systemd:
    name: "{{ item.name }}"
    state: started
    enabled: yes
    daemon_reload: yes
  loop: "{{ _service }}"
  register: result
  until: result is succeeded
  tags: firewalld

- name: Configure firewalld on master nodes
  firewalld:
    port: "{{ item.port }}/{{ item.protocol }}"
    permanent: yes
    state: enabled
  loop: '{{ _k8s_master_ports }}'
  # when: "'master' in ansible_hostname"
  tags: firewalld

- name: Configure firewalld on worker nodes
  firewalld:
    port: "{{ item.port }}/{{ item.protocol }}"
    permanent: yes
    state: enabled
  loop: '{{ _k8s_worker_ports }}'
  # when: "'worker' in ansible_hostname"
  tags: firewalld

- name: Reload firewalld
  shell: firewall-cmd --reload
  tags: firewalld

# - name: Add /usr/local/bin to sudo secure_path
#   lineinfile:
#     line: 'Defaults    secure_path = /sbin:/bin:/usr/sbin:/usr/bin:/usr/local/bin'
#     regexp: "Defaults(\s)*secure_path(\s)*="
#     state: present
#     insertafter: EOF
#     path: /etc/sudoers
#     validate: 'visudo -cf %s'
#   tags: firewalld

# - name: Download script
#   get_url:
#     url: "{{ item.url }}"
#     # checksum: "{{ item.checksum }}"
#     dest: "{{ item.dest }}"
#     owner: root
#     group: root
#     mode: 0755
#   loop: "{{ _install_script }}"
#   register: result
#   until: result is succeeded
#   tags: firewalld

# - name: Execute script
#   shell: "{{ item.dest }}"
#   become: true
#   loop: "{{ _install_script }}"
#   register: result
#   until: result is succeeded
#   tags: firewalld

# - name: Remove script
#   file:
#     path: "{{ item.dest }}"
#     state: absent
#   loop: "{{ _install_script }}"
#   register: result
#   until: result is succeeded
#   tags: firewalld
